#!/usr/bin/php
<?php

// Support commands
define('DIFF_CMD', dirname(__FILE__) . '/cdiff');

require_once('Spyc.php');

if(file_exists(".mergesources.yml")) {
	$parser = new Spyc();
	$mergeSources = $parser->load(file_get_contents('.mergesources.yml'));

	$svnInfo = SVNHelp::xmlCommand("svn info --xml &> /dev/stdout");
	$svnRoot = $svnInfo->entry->repository->root.'';
	$svn = new SVNHelp($svnRoot);

	if($_SERVER['argv'][1]) {
		if(strpos($_SERVER['argv'][1], "/") !== false) {
			list($mergeSource, $dir) = explode("/", $_SERVER['argv'][1]);
			$action = "interactive";
		} else {
			$onlyMergeSource = $_SERVER['argv'][1];
			$onlyDir = null;
			$action = "summary";
		}
	} else {
		$action = "summary";
	}

	$options = $_SERVER['argv'];
	array_shift($options); // shift off command ('arb')
	// Only shift off if we don't have arguments (e.g. '--help')
	if(isset($options[0]) && strpos($options[0], '--') === FALSE) {
		array_shift($options); // shift off mandatory options (e.g. '2.4/sapphire')
	}
	
	$keyedOptions = array();
	if($options) foreach($options as $option) {
		// NO SPACES!  I'm a bad parser
		preg_match('/--*([^=]+)=?(.*)/', $option, $matches);
		if(preg_match('/--*([^=]+)=?(.*)/', $option, $matches)) {
			$key = trim(strtolower($matches[1]));
			$val = trim($matches[2]);
			$keyedOptions[$key] = $val;
		}
	}

	if(isset($keyedOptions['startrev'])) $startrev = $keyedOptions['startrev'];
	else $startrev = null;


	switch($action) {
	case "interactive":
		if(isset($mergeSources[$mergeSource][$dir])) {
			$source = $mergeSources[$mergeSource][$dir];

			if(preg_match('/^[a-z]+:\/\//', $source)) {
				echo "Bad merge source: $source\nPlease specify your merge sources relative to the "
					. "repostory root.\n";
				exit(3);
			}

			if($source[0] != "/") $source = "/$source";

			echo "$dir (from $svnRoot$source)\n";

			// Scrub source and dest of extraneous mergeinfo
			echo "Checking mergeinfo integrity... ";
			$svn->scrubMergeInfoIfNecessary($source, true);
			$svn->scrubMergeInfoIfNecessary($dir);
			echo "done.\n";

			// Handle the revs argument
			if(isset($keyedOptions['revs'])) {
				$revs = preg_replace('/ *, */', "\n", $keyedOptions['revs']);
			} else {
				$revs = trim(`svn mergeinfo --show-revs=eligible $svnRoot$source $dir`);
			}
			$revs = $revs ? explode("\n", str_replace("r","", $revs)) : array();

			$svn->formatMergeReport($revs, $source, $dir, $startrev, !$startrev && !isset($keyedOptions['revs']));
		} else {
			echo "Can't find merge source $mergeSource/$dir\n";
			exit(2);
		}
		break;

	case "summary":
		$nothingFrom = array();

		foreach($mergeSources as $name => $items) {
			if($onlyMergeSource && $name != $onlyMergeSource) continue;

			echo "Looking for changesets from $name...\n\n";

			foreach($items as $dir => $source) {
				if($onlyDir && $dir != $onlyDir) continue;

				if($source[0] != "/") $source = "/$source";
				$revs = trim(`svn mergeinfo --show-revs=eligible $svnRoot$source $dir`);
				if($revs) {
					echo "$dir (from $svnRoot$source)\n$revs\n\n";
				} else {
					$nothingFrom[] = "$name/$dir";
				}
			}
		}

		if($nothingFrom) {
			echo "Nothing to merge from: " . implode(", ", $nothingFrom) . "\n";
		}

		break;
	}

} else {
	echo "Can't find .mergesources.yml\n";
	exit(1);
}

/**
 * Prints the command, waits for a keystroke, and then executes it. saying that the command is being executed
 */
function suggestCommand($command) {
	if(promptUser("EXEC: $command") == 'y') {
		passthru($command);
		echo "\n";
	}
}

/**
 * Prints the command and executes it without prompting
 */
function execCommand($command) {
	echo "EXEC: $command\n";
	passthru($command);
	echo "\n";
}
/**
 * Prompt the user for a number of options (first is default)
 */
function promptUser($message, $options = array('y' => '(y)es', 'n' => '(n)o')) {
	echo $message . ' [' . implode(', ', $options) . '] ';

	$input = trim(fgets(STDIN));
	if($input) $firstLetter = strtolower($input[0]); else $firstLetter = null;
	if(isset($options[$firstLetter])) return $firstLetter;
	else {
		$keys = array_keys($options);
		return $keys[0];
	}
}


class SVNHelp {
	protected $repos;

	function __construct($repos) {
		$this->repos = $repos;
	}

	function repos() {
		return $this->repos;
	}

	/**
	 * Check that the given URL has no mergeinfo on sub-items, and if so, recommends a commit to
	 * remove it.
	 */
	function scrubMergeInfoIfNecessary($mergeDir, $remoteDir = false) {
		$url = $remoteDir ? $this->repos() . $mergeDir : $mergeDir;
		$CLI_url = escapeshellarg($url);

		$CLI_checkItems = array();
		$subitemsXML = $this->xmlCommand("svn ls --xml $CLI_url");
		foreach($subitemsXML->xpath('//name') as $subitem) {
			$CLI_checkItems[] = escapeshellarg("$url/$subitem");
		}

		// Check for any mergeinfo on subdirectories
		$checkCommand = "svn propget --recursive svn:mergeinfo " . implode(" ", $CLI_checkItems);
		if(trim(`$checkCommand`)) {
			echo "There is junk mergeinfo on files and subdirectories in $url.  I need to scrub it "
				. " before continuing.\n";

			$propdelDir = $remoteDir ? "/tmp/arb-mergescrub" : $mergeDir;
			if($remoteDir) execCommand("svn co $CLI_url $propdelDir");

			suggestCommand("svn propdel --recursive svn:mergeinfo $propdelDir/*");
			passthru("svn diff $propdelDir --diff-cmd " . escapeshellarg(DIFF_CMD));
			suggestCommand("svn commit $propdelDir -m 'MINOR: Removed explicit svn:mergeinfo from subfolders'");
			if($remoteDir) execCommand("rm -rf '/tmp/arb-mergescrub'");
		}

	}

	function formatMergeReport($revs, $mergeSource, $dir, $startrev = null, $blockMergebacks = true) {
		$fullMergeSource = $this->repos() . $mergeSource;

		$blockedRevs = array();

		// Find mergebacks to block
		if($blockMergebacks) {
			foreach($revs as $i => $rev) {
				if($this->isRevMergedFrom($rev, $fullMergeSource, $dir)) {
					$blockedRevs[] = $rev;
					unset($revs[$i]);
				}
			}
		}

		$numRevs = sizeof($revs);

		foreach($revs as $i => $rev) {
			$rev = str_replace("r","", $rev);
			if($startrev && $rev < $startrev) continue;

			$logMessage = $this->revlog($rev, 'msg', $fullMergeSource);

			echo "[" . ($i+1) . "/$numRevs] Merge r$rev: $logMessage\n";
			// no need to show EXEC: preamble, just use passthru
			passthru("svn diff $fullMergeSource -c $rev --diff-cmd " . escapeshellarg(DIFF_CMD));
			$action = promptUser("Merge?", array(
				'y' => '(y)es',
				'n' => '(n)o',
				'b' => '(b)lock'));

			switch($action) {
			case 'y':
				execCommand("svn update $dir");
				execCommand("svn merge -c $rev $fullMergeSource $dir");
 				execCommand("svn propdel --recursive svn:mergeinfo $dir/*");
				execCommand("svn diff $dir --diff-cmd " . escapeshellarg(DIFF_CMD));
				suggestCommand("svn commit $dir -m " . escapeshellarg($logMessage . " (from r$rev)"));
				break;

			case 'b':
				$blockedRevs[] = $rev;
				break;
			}

			echo "\n";
		}

		// Commit the block request
		if($blockedRevs) {
			if(promptUser("Block revisisons " .  implode(",", $blockedRevs) . "?") == 'y') {
				execCommand("svn merge --record-only -c " . implode(",", $blockedRevs) . " "
					. escapeshellarg($fullMergeSource) . " " . escapeshellarg($dir));
				execCommand("svn commit $dir -m 'MINOR: Blocking unnecessary revisions'");
			}
		}

	}

	function isRevMergedFrom($rev, $revSource, $originalSource) {
		$svnInfo = $this->xmlCommand("svn log -c $rev -g --xml $revSource &> /dev/stdout");
		foreach($svnInfo->xpath('//logentry/logentry') as $src) {
			$origRev = $src['revision'].'';
			$origSvnInfo = $this->xmlCommand("svn log -c $origRev --xml $originalSource &> /dev/stdout");
			if($origSvnInfo->xpath('//logentry')) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Get the log message$svn for a single revision
	 */
	function revlog($rev, $infoPart = null, $svnDir = null) {
		if(!$svnDir) $svnDir = $this->repos();
		$xml = $this->xmlCommand("svn log --xml -r $rev $svnDir &> /dev/stdout");
		$info = array(
			'author' => $xml->logentry->author,
			'date' => $xml->logentry->date,
			'msg' => trim($xml->logentry->msg),
		);
		if($infoPart) return $info[$infoPart];
		else return $info;
	}


	/**
	 * Execute a command-line command, parse the result as XML, and return a SimpleXMLElement.
	 * Die with an error message to the user on a failed parse.
	 */
	function xmlCommand($command) {
		try {
			$output = `$command`;
			$svnInfo = @new SimpleXMLElement($output);
		} catch(Exception $e) {
			echo "\nCouldn't run this command - it returned bad XML data:\n$command\n\n";
			echo "The output was as follows:\n$output\n";
			exit(100);
		}
		return $svnInfo;
	}

}